package com.barbearia;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import lombok.RequiredArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;

// ðŸš€ AplicaÃ§Ã£o Principal (Spring Boot)
@SpringBootApplication
public class BarbeariaApplication {
    public static void main(String[] args) {
        SpringApplication.run(BarbeariaApplication.class, args);
    }

    @Bean
    CommandLineRunner initData(ClienteRepository clienteRepository, AgendamentoRepository agendamentoRepository) {
        return args -> {
            Cliente cliente1 = new Cliente();
            cliente1.setNome("JoÃ£o Silva");
            cliente1.setTelefone("11999999999");
            clienteRepository.save(cliente1);

            Cliente cliente2 = new Cliente();
            cliente2.setNome("Ana Souza");
            cliente2.setTelefone("11988888888");
            clienteRepository.save(cliente2);

            Agendamento agendamento = new Agendamento();
            agendamento.setCliente(cliente1);
            agendamento.setDataHora(LocalDateTime.now().plusDays(1));
            agendamentoRepository.save(agendamento);
        };
    }
}

// ðŸš€ Modelo Cliente
@Data
@Entity
@Table(name = "clientes")
class Cliente {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Nome Ã© obrigatÃ³rio")
    private String nome;

    @NotBlank(message = "Telefone Ã© obrigatÃ³rio")
    private String telefone;
}

// ðŸš€ RepositÃ³rio Cliente
@Repository
interface ClienteRepository extends JpaRepository<Cliente, Long> {}

// ðŸš€ ServiÃ§o Cliente
@Service
@RequiredArgsConstructor
class ClienteService {
    private final ClienteRepository repository;

    public Cliente salvarCliente(Cliente cliente) {
        return repository.save(cliente);
    }

    public List<Cliente> listarClientes() {
        return repository.findAll();
    }

    public Cliente buscarPorId(Long id) {
        return repository.findById(id).orElseThrow(() -> new RuntimeException("Cliente nÃ£o encontrado"));
    }

    public void deletarCliente(Long id) {
        repository.deleteById(id);
    }
}

// ðŸš€ Controlador Cliente (API REST)
@RestController
@RequestMapping("/clientes")
@RequiredArgsConstructor
class ClienteController {
    private final ClienteService service;

    @PostMapping
    public Cliente cadastrar(@RequestBody Cliente cliente) {
        return service.salvarCliente(cliente);
    }

    @GetMapping
    public List<Cliente> listar() {
        return service.listarClientes();
    }

    @GetMapping("/{id}")
    public Cliente buscarPorId(@PathVariable Long id) {
        return service.buscarPorId(id);
    }

    @DeleteMapping("/{id}")
    public void deletar(@PathVariable Long id) {
        service.deletarCliente(id);
    }
}

// ðŸš€ Modelo Agendamento
@Data
@Entity
@Table(name = "agendamentos")
class Agendamento {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "cliente_id")
    private Cliente cliente;

    private LocalDateTime dataHora;
}

// ðŸš€ RepositÃ³rio Agendamento
@Repository
interface AgendamentoRepository extends JpaRepository<Agendamento, Long> {}

// ðŸš€ Controlador Agendamento (API REST)
@RestController
@RequestMapping("/agendamentos")
@RequiredArgsConstructor
class AgendamentoController {
    private final AgendamentoRepository repository;

    @PostMapping
    public Agendamento cadastrar(@RequestBody Agendamento agendamento) {
        return repository.save(agendamento);
    }

    @GetMapping
    public List<Agendamento> listar() {
        return repository.findAll();
    }

    @GetMapping("/{id}")
    public Agendamento buscarPorId(@PathVariable Long id) {
        return repository.findById(id).orElseThrow(() -> new RuntimeException("Agendamento nÃ£o encontrado"));
    }

    @DeleteMapping("/{id}")
    public void deletar(@PathVariable Long id) {
        repository.deleteById(id);
    }
}
